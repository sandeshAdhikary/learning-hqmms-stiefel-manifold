%% Experiment Script for Synthetic Data Generated by HMM (learning HMM)
clc
clear

%% Set parameters for models to evaluate
params.num_folds = 5;

% HMM hyperparams
params.hmm.latent_dim = 4;
params.hmm.num_outputs = 4;
params.hmm.max_iterations = 500;
params.output_prefix = 'evaluation scripts/splice_data/results/hmm/hmm';

%% Set seed for reproducibility
seed = 5;
rng(seed)

%% Load Data
load('splice_data.mat')

% Shuffle the data
num_ei_examples = size(spliceei, 1);
num_ie_examples = size(spliceie, 1);
num_n_examples = size(splicen, 1);
shuffleEI = spliceei(randsample(1:num_ei_examples, num_ei_examples, ...
                                                                false), :);
shuffleIE = spliceie(randsample(1:num_ie_examples, num_ie_examples, ...
                                                                false), :);
shuffleN = splicen(randsample(1:num_n_examples, num_n_examples, ... 
                                                                false), :);

% Split into folds
ei_splits = crossvalind('Kfold',num_ei_examples,params.num_folds);
ie_splits = crossvalind('Kfold',num_ie_examples,params.num_folds);
n_splits = crossvalind('Kfold',num_n_examples,params.num_folds);

[ei_folds, ie_folds, n_folds] = deal(cell(params.num_folds,1));

for i = 1:params.num_folds
    ei_folds{i} = shuffleEI(ei_splits==i,:);
    ie_folds{i} = shuffleIE(ie_splits==i,:);
    n_folds{i} = shuffleN(n_splits==i,:);
end

% Create list to track error for each fold
[ei_hmm_errors, ie_hmm_errors, n_hmm_errors] = deal( ...
                                                 null(params.num_folds,1));


%% Start the training
for k = 1:params.num_folds
    
    % Collect k-1 folds
    val_ei = ei_folds{k};
    val_ie = ie_folds{k};
    val_n = n_folds{k};
    
    train_ei = cell2mat([ei_folds(1:k-1); ei_folds(k+1:end)]);
    train_ie = cell2mat([ie_folds(1:k-1); ie_folds(k+1:end)]);
    train_n = cell2mat([n_folds(1:k-1); n_folds(k+1:end)]);

    % Train the EI model
    fprintf('Training the EI Model...\n');
    [trans_init_ei, emit_init_ei] = randomHMM(params.hmm.latent_dim, ...
                                                 params.hmm.num_outputs);
    [trans_ei, emit_ei] = hmmtrain(train_ei, trans_init_ei, ...
                                emit_init_ei, 'verbose', 'true', ...
                                'maxiterations',params.hmm.max_iterations);

    % Train the IE model
    fprintf('\nTraining the IE Model...\n');
    [trans_init_ie, emit_init_ie] = randomHMM(params.hmm.latent_dim, ...
                                                 params.hmm.num_outputs);
    [trans_ie, emit_ie] = hmmtrain(train_ie, trans_init_ie, ...
                               emit_init_ie, 'verbose', 'true', ...
                               'maxiterations', params.hmm.max_iterations);

    % Train the N model
    fprintf('\nTraining the N Model...\n');
    [trans_init_n, emit_init_n] = randomHMM(params.hmm.latent_dim, ...
                                               params.hmm.num_outputs);
    [trans_n, emit_n] = hmmtrain(train_n, trans_init_n, emit_init_n, ...
                                 'verbose', 'true', 'maxiterations', ...
                                 params.hmm.max_iterations);
    
    % Evaluate models on held-out fold
    % Test on EI data
    fprintf('\n[Fold: %d] Evaluating Models on EI Validation Data...\n',k);       
    ei_hmm_errors(k) = get_label_error_hmm(val_ei, 1, trans_ei, ...
                                            emit_ei, trans_ie, emit_ie, ...
                                            trans_n, emit_n);  
    
    % Test on IE data
    fprintf('\n[Fold: %d] Evaluating Models on IE Validation Data...\n',k);       
    ie_hmm_errors(k) = get_label_error_hmm(val_ie, 2, trans_ei, ...
                                            emit_ei, trans_ie, emit_ie, ...
                                            trans_n, emit_n);     
    
    % Test on N data
    fprintf('\n[Fold: %d] Evaluating Models on N Validation Data...\n',k);       
    n_hmm_errors(k) = get_label_error_hmm(val_n, 3, trans_ei, ...
                                            emit_ei, trans_ie, emit_ie, ...
                                            trans_n, emit_n);  

    csvwrite(sprintf('%s_%d_%d_ei_errors_hmm_%d.csv', ...
                        params.output_prefix, params.hmm.latent_dim, ...
                        params.hmm.num_outputs, seed), ei_hmm_errors);
    csvwrite(sprintf('%s_%d_%d_ie_errors_hmm_%d.csv', ...
                        params.output_prefix, params.hmm.latent_dim, ...
                        params.hmm.num_outputs, seed), ie_hmm_errors);                                               
    csvwrite(sprintf('%s_%d_%d_n_errors_hmm_%d.csv', ...
                        params.output_prefix, params.hmm.latent_dim, ...
                        params.hmm.num_outputs, seed), n_hmm_errors);                                                  
    
    fprintf('Fold Complete\n')    
end

fprintf('\nHMM Error Rates:');
fprintf('\tEI Error Rate: %f', mean(ei_hmm_errors))
fprintf('\tIE Error Rate: %f', mean(ie_hmm_errors))
fprintf('\tN Error Rate: %f\n', mean(n_hmm_errors))

out_file_id = fopen(sprintf('%s_%d_%d_mean_errors_%d.csv', ...
              params.output_prefix, params.hmm.latent_dim, ...
                        params.hmm.num_outputs, seed), 'w');
fprintf(out_file_id, 'ei_errors,ie_errors,n_errors,mean_error\n');
fprintf(out_file_id, '%f,%f,%f,%f\n', mean(ei_hmm_errors), ...
                        mean(ie_hmm_errors), mean(n_hmm_errors), ...
                        mean([mean(ei_hmm_errors), mean(ie_hmm_errors), ...
                        mean(n_hmm_errors)])); 